name: Build with CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        compiler: [g++-9, g++-10, clang++-10, clang++-11, clang++-12]
        include:
          - os: ubuntu-18.04
            compiler: g++-7
          - os: ubuntu-18.04
            compiler: g++-9
          - os: ubuntu-18.04
            compiler: g++-10
          - os: ubuntu-18.04
            compiler: clang++-9
          - os: macos-latest
            xcode: default
          - os: macos-latest
            xcode: 11.7
          - os: macos-latest
            xcode: 10.3
          - os: macos-latest
            compiler: g++-9
          - os: macos-latest
            compiler: g++-10
          - os: macos-latest
            compiler: g++-11
          - os: windows-2016
          - os: windows-2019

    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Select XCode
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
      if: startsWith( matrix.os, 'macos') && matrix.xcode && matrix.xcode != 'default'

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:
        CXX: ${{ matrix.compiler }}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - uses: ammaraskar/msvc-problem-matcher@master
      if: ${{ startsWith( matrix.os, 'windows' ) }}
    - uses: ammaraskar/gcc-problem-matcher@master
      if: ${{ startsWith( matrix.compiler, 'g++') }}
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
